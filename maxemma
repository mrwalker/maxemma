#! /usr/bin/env python

'''
Reference implementation of the educational language maxemma, designed to teach
very young children to code.
'''

from pyparsing import (
    Literal, OneOrMore, Word, alphas, nums, SkipTo, LineEnd, ParseException
)


class Parser(object):
    def __init__(self):
        self.context = {}

    def syntax(self):
        eq = Literal('=').suppress()
        question = Literal('?').suppress()
        colon = Literal(':')

        variable = Word(alphas)
        numeric = Word(nums)

        repeat = (numeric + SkipTo(LineEnd())).setParseAction(self.repeat)
        check = (question + variable + SkipTo(colon) + colon + SkipTo(LineEnd())).setParseAction(self.check)
        expr = (variable | numeric).setParseAction(self.expression)
        action = OneOrMore(repeat | check | expr)
        assignment = (variable + eq + SkipTo(LineEnd())).setParseAction(self.assign)

        return assignment | action

    def parse(self, line):
        try:
            return self.syntax().parseString(line)
        except ParseException as e:
            print "Sorry, I don't understand"

    def repl(self):
        print 'Hello'
        while True:
            try:
                self.parse(raw_input('> '))
            except EOFError as e:
                print 'Goodbye!'
                return

    def evaluate(self, action):
        for a in action:
            if a in self.context:
                self.parse(self.context[a])
            else:
                print a

    def repeat(self, string, location, tokens):
        numeric = int(tokens[0])
        program = ' '.join(tokens[1:])
        for _ in xrange(numeric):
            self.parse(program)

    def check(self, string, location, tokens):
        #variable = tokens.pop(0) # Doesn't work with ParseResults
        variable = tokens[0]
        tokens = tokens[1:]

        colon = tokens.index(':')
        program_set = ' '.join(tokens[:colon])
        program_unset = ' '.join(tokens[colon + 1:])

        if variable in self.context:
            self.parse(program_set)
        else:
            self.parse(program_unset)

    def expression(self, string, location, expr):
        self.evaluate(expr)

    def assign(self, string, location, tokens):
        variable = tokens[0]
        program = ' '.join(tokens[1:])
        self.context[variable] = program


if __name__ == '__main__':
    Parser().repl()
